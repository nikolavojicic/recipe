#+STARTUP: indent
#+STARTUP: hidestars

#+PROPERTY: header-args :dir target/examples

#+PROPERTY: header-args:java  :cmdline -classpath .;../classes/
#+PROPERTY: header-args:java+ :cmpflag -classpath .;../classes/
#+PROPERTY: header-args:java+ :imports org.recipe.Recipe java.util.function.Supplier java.util.UUID java.util.concurrent.atomic.AtomicLong

** recipe

Extends [[https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html][java.util.function.Supplier]] with higher-order methods that enable composition of
suppliers and transformation and filtering of the results produced by the functional method ~get~.

** Installation

Requires *Java 8* or higher.

Currently, the main option for installation is [[https://jitpack.io/][Jitpack]]:

#+begin_src groovy
dependencies {
    implementation 'com.github.nikolavojicic:recipe:<COMMIT-HASH>'
}
#+end_src

*TODO*: Publish to the /Maven Central Repository/.

** Examples

*** Preparation

**** Compile project

#+begin_src sh :dir . :results none
  mvn clean compile
#+end_src

**** Verify Java version

#+name: verify-java-version
#+begin_src java :results value :exports both
  return System.getProperty("java.version");
#+end_src

> Results ↴
#+RESULTS: verify-java-version
: 17.0.2

#+begin_src java :noweb yes :tangle target/examples/Util.java :classname Util :exports none :results none
  <<UtilImports>>

  public class Util {

      // dummy main to avoid auto-generated
      public static void main(String[] args) {}

      <<Util>>

  }
#+end_src

**** Add imports needed for examples

#+begin_src java :noweb-ref UtilImports :results none
  import org.recipe.Recipe;

  import static org.recipe.util.Fn.*;

  import java.util.Arrays;
  import java.util.List;
  import java.util.Map;
  import java.util.Objects;
  import java.util.UUID;
  import java.util.concurrent.atomic.AtomicLong;
  import java.util.function.Supplier;
  import java.util.stream.Stream;

  import static java.util.concurrent.ThreadLocalRandom.current;

#+end_src

*** Creating recipes

[[https://github.com/nikolavojicic/recipe/blob/master/src/main/java/org/recipe/Recipe.java][Recipe]] is a functional interface that extends the [[https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html][Supplier]] interface.
Both of them represent functions that accept nothing and return some value.
These functions are executed by calling the functional method ~get~.

**** Lambda expression

#+name: lambda-expression
#+begin_src java :results value :exports both
  Supplier<String> sup = () -> "foo";
  Recipe  <String> rec = () -> "foo";
  return sup.get().equals(rec.get());
#+end_src

> Results ↴
#+RESULTS: lambda-expression
: true

**** Method reference

#+name: method-reference
#+begin_src java :results output :exports both
  Recipe<UUID> rec = UUID::randomUUID;
  System.out.println(rec.get());
  System.out.println(rec.get());
#+end_src

> Results ↴
#+RESULTS: method-reference
: 73299a1e-61b2-499d-8b12-72f4faac97cf
: b45f37d7-f174-4d06-ada3-99a867183548

**** Function -> Recipe

Recipe extends Supplier by providing default methods that enable composition of suppliers
/ recipes and transformation and filtering of the results produced by the method ~get~.

There is no way to chain those default method calls directly on the lambda expression
/ method reference so that the whole definition of a Recipe is written as a single
expression. One way to achieve this is to use the static factory method ~of~ as a wrapper.

#+begin_src java :noweb-ref Util :results none
  public static final Recipe<String>
      REC_UUID_STR = Recipe
          .of(UUID::randomUUID)
          .map(UUID::toString);
#+end_src

All Recipe methods that accept other recipes as arguments, accept any extension of the
Supplier instead of the concrete Recipe type. That's why the method ~of~ can also be used
as a converter to the Recipe type.

#+name: convert
#+begin_src java :results value :exports both
  Supplier<UUID> sup = UUID::randomUUID;
  return Recipe
      .of(sup)
      .map(UUID::toString)
      .map(String::length)
      .get();
#+end_src

> Results ↴
#+RESULTS: convert
: 36

**** Constant Recipe

Recipe that constantly returns the given reference can be created with the static factory method ~ofValue~.

#+name: value->recipe
#+begin_src java :results value :exports both
  Recipe<List> rec = Recipe
      .ofValue(Arrays.asList(1, 2, 3));
  return rec.get() == rec.get();
#+end_src

> Results ↴
#+RESULTS: value->recipe
: true

This method is also useful for creating stateful recipes (provided argument should be thread-safe).

#+name: autoincrement
#+begin_src java :results output :exports both
  Recipe<Long> rec = Recipe
      .ofValue(new AtomicLong())
      .map(AtomicLong::incrementAndGet);

  System.out.println(rec.get());
  System.out.println(rec.get());
  System.out.println(rec.get());
#+end_src

> Results ↴
#+RESULTS: autoincrement
: 1
: 2
: 3
